---
globs: *.ts,*.mjs,*.js,*.scss,*.css
alwaysApply: false
---
# General Coding Recommendations

Write code in a specified programming language (or detect it automatically) following certain criteria and tasks. Comments in the code are allowed as well, but preferably in English.

The primary build system is Vite. Take into account the latest versions of browsers (Chrome 137 and above) and standards (WICG, WHATWG, ECMA, W3C, TC39, CSSWG), as much as possible...

Try to fix possible validation issues, if found in/by IDE/Editor, and fix very weird or non-perfect indentations (using by spaces).

It is also desirable not to output excessive amounts of code and lines; whenever possible, keep things simple and concise. For follow-up requests, output only the potential edits. Also, de-dublicate redundant or unnecessary code, where is possible.

Write and output ONLY code, without any introduction, intermission or footer or post-scriptum.

---

## üå≥ Project Hierarchy

### ‚õ∞Ô∏è Level 0 (project root)

- `./` - Project root directory
- `modules/` - Modules directory
- `modules/unite-2.man` - Project manifest
- `modules/shared/` - Shared modules, utilities, etc.
- `runtime/` - Application running backend runtimes
- `externals/` - External dependencies, built-in libraries, production libraries, etc.
- `assets/` - Project assets, images, fonts, etc. (planned for future usage)

### üöß Level 1 (core libraries)

- `modules/dom.ts` - DOM utils and helpers library
- `modules/object.ts` - Core reactivity library

### üß± Level 2 (derived libraries)

- `modules/lur.e` - reactive DOM framework

### üèóÔ∏è Level 3 (UI libraries)

- `modules/fl.ui` - UI system and components library

### üè¨ Level 4 (applications)

- `apps/*` - Applications projects

---

## üß© Import rules

- ‚úÖ Allowed imports from lower level to higher level only.
- ‚ö†Ô∏è Normally, imports between in same level or not approved.
- ‚õî Imports in lower level from next level is not allowed.

### üß™ Examples

- ‚úÖ `fest/lure` can import `fest/object` or `fest/dom`, but not vice versa.
- ‚ö†Ô∏è `fest/object` and `fest/dom`, or something in same level, isn't allowed to import vice versa...
- ‚õî `fest/object`, `fest/dom` isn't allowed to import `fest/lure` or `fest/fl-ui`.

---

## Common Imports

- `fest/dom` - DOM utils and helpers library
- `fest/lure` - reactive DOM framework
- `fest/object` - Core reactivity library
- `fest/fl-ui` - UI system and components library

---

## Project Directory Mapping

By default, use key-name as import root.

| Library | Path |
|---|---|
| `fest/lure`   | `modules/lur.e`     |
| `fest/dom`    | `modules/dom.ts`    |
| `fest/object` | `modules/object.ts` |
| `fest/fl-ui`  | `modules/fl.ui`     |

---

## Our projects (for following)

- <https://github.com/fest-live>

## About Vite

- <https://vite.dev/guide/>
- <https://vite.dev/config/>

## Guidelines

- <https://chromestatus.com/>
- <https://developer.chrome.com/>
- <https://caniuse.com/>
