---
alwaysApply: false
---
# Some additional properties and values

## CSS Color System Functions

- `--c2-surface(--tone <number>, --base <color>)` - Surface color generation
- `--c2-contrast(--tone <number>, --base <color>)` - Contrast color generation
- `--c2-on-surface(--tone <number>, --base <color>)` - On-surface color generation
- `--c2-on-contrast(--tone <number>, --base <color>)` - On-contrast color generation

---

## CSS Custom Properties (and variables)

### Numbers

- `--orient` - Orientation value
- `--zoom` - Zoom level
- `--drag-x`, `--drag-y` - Drag offset
- `--resize-x`, `--resize-y` - Resize offset
- `--shift-x`, `--shift-y` - Position shift
- `--scroll-left`, `--scroll-top` - Scroll position
- `--percent-x`, `--percent-y` - Scroll percentage
- `--scroll-size`, `--content-size` - Scroll dimensions

### Lengths

#### Core Properties

- `--ppx` - Pixel unit property (`syntax: "<length-percentage>", initial: 1px`)
- `--zpx` - Zoom pixel unit (`syntax: "<length-percentage>", initial: 1px`)
- `--scaling` - Scaling factor (`syntax: "<number>", initial: 1`)
- `--pixel-ratio` - Device pixel ratio (`syntax: "<number>", initial: 1`)
- `--secondary` - Secondary orientation flag (`syntax: "<integer>", initial: 0`)

#### Orientation Properties

- `--ox-orient` - Outer X orientation (`syntax: "<number>", initial: 0`)
- `--os-orient` - Outer Y orientation (`syntax: "<number>", initial: 0`)
- `--in-orient` - Inner orientation (`syntax: "<number>", initial: 0`)
- `--orient` - Current orientation (`syntax: "<number>", initial: 0`)
- `--zoom` - Zoom level (`syntax: "<number>", initial: 1`)

#### Transform Properties

- `--translate-x` - X translation (`syntax: "<length-percentage>", initial: 0px`)
- `--translate-y` - Y translation (`syntax: "<length-percentage>", initial: 0px`)
- `--opacity` - Opacity value (`syntax: "<number>", initial: 1`)
- `--scale` - Scale factor (`syntax: "<number>", initial: 1`)
- `--corrector` - Correction factor (`syntax: "<number>", initial: 1`)
- `--rot` - Rotation angle (`syntax: "<angle>", initial: 0deg`)
- `--i-rot` - Inner rotation (`syntax: "<angle>", initial: 0deg`)

#### Drag & Resize Properties

- `--resize-x` - X resize offset (`syntax: "<number>", initial: 0`)
- `--resize-y` - Y resize offset (`syntax: "<number>", initial: 0`)
- `--drag-x` - X drag offset (`syntax: "<number>", initial: 0`)
- `--drag-y` - Y drag offset (`syntax: "<number>", initial: 0`)

#### Screen & Viewport Properties

- `--screen-width` - Screen width (`syntax: "<length-percentage>", initial: 100dvi`)
- `--screen-height` - Screen height (`syntax: "<length-percentage>", initial: 100dvb`)
- `--avail-width` - Available width (`syntax: "<length-percentage>", initial: 100dvi`)
- `--avail-height` - Available height (`syntax: "<length-percentage>", initial: 100dvb`)
- `--view-height` - Viewport height (`syntax: "<length-percentage>", initial: 100dvb`)

#### Container Query Properties

- `--cqi` - Container query inline size (`syntax: "<length-percentage>", initial: 100cqi`)
- `--cqb` - Container query block size (`syntax: "<length-percentage>", initial: 100cqb`)

#### Coordinate System Properties

- `--cs-size-x`, `--cs-size-y` - Client space size
- `--os-size-x`, `--os-size-y` - Orientation space size
- `--cs-self-size-x`, `--cs-self-size-y` - Client space self size
- `--os-self-size-x`, `--os-self-size-y` - Orientation space self size
- `--cs-inset-x`, `--cs-inset-y` - Client space inset
- `--os-inset-x`, `--os-inset-y` - Orientation space inset
- `--in-inset-x`, `--in-inset-y` - Inner inset

#### Border & Padding Properties

- `--border-width` - Border width (`syntax: "<length-percentage>", initial: 100%`)
- `--border-height` - Border height (`syntax: "<length-percentage>", initial: 100%`)
- `--avi` - Available inline size (`syntax: "<length-percentage>", initial: 0px`)
- `--avb` - Available block size (`syntax: "<length-percentage>", initial: 0px`)

#### Viewport Properties

- `--vp-i-size` - Viewport inline size (`syntax: "<length-percentage>", initial: 0px`)
- `--vp-b-size` - Viewport block size (`syntax: "<length-percentage>", initial: 0px`)

#### Keyboard Properties

- `--keyboard-inset-bottom` - Keyboard inset bottom (`syntax: "<length-percentage>", initial: 0px`)
- `--keyboard-inset-height` - Keyboard inset height (`syntax: "<length-percentage>", initial: 0px`)

### Grid Layout System

#### Core Grid Layout

- `.ui-gridlayout` - Main grid layout container
- Grid template: `repeat(var(--cs-layout-c, 4), minmax(0px, 1fr))` columns
- Grid template: `repeat(var(--cs-layout-r, 8), minmax(0px, 1fr))` rows
- Container name: `u2-grid`
- Container type: `normal`

#### Grid Item Properties

- `--layout-c` - Number of columns (default: 4)
- `--layout-r` - Number of rows (default: 8)
- `--ox-c-span` - Column span
- `--ox-r-span` - Row span
- `--cs-grid-c` - Client space grid column
- `--cs-grid-r` - Client space grid row

#### Grid Gaps

- `--c-gap` - Column gap (responsive calculation)
- `--r-gap` - Row gap (responsive calculation)

---

## Mixins System

### Orientation Mixins

- `@mixin oriented($property, $portrait, $landscape)` - Orientation-aware properties
- `@mixin compute_os_conditions` - Compute orientation conditions
- `@mixin compute_os_size_to_cs` - Convert orientation space to client space
- `@mixin compute_cs_size_to_os` - Convert client space to orientation space

### Grid Layout Mixins

- `@mixin compute_orient_grid_layout` - Compute oriented grid layout
- `@mixin compute_grid_item_cell` - Compute grid item cell positioning

### Layout Mixins

- `@mixin center` - Center content and items
- `@mixin stretch` - Stretch to full size
- `@mixin flex($dir: row)` - Flexbox layout
- `@mixin fit-in-grid($columns: 1, $rows: 1)` - Fit in grid
- `@mixin row-subgrid($column: 1, $columns: 1)` - Row subgrid
- `@mixin column-subgrid($row: 1, $rows: 1)` - Column subgrid

### Utility Mixins

- `@mixin no-wrap` - Prevent text wrapping
- `@mixin contents` - Transparent wrapper
- `@mixin flex-break` - Flex line break
- `@mixin flex-space` - Flex space distribution
- `@mixin fit-by-block($size, $aspect: "1 / 1")` - Fit by block size
- `@mixin fit-by-inline($size, $aspect: "1 / 1")` - Fit by inline size
- `@mixin clamped-inline($size, $min: "0px", $max: "100%")` - Clamped inline size
- `@mixin clamped-block($size, $min: "0px", $max: "100%")` - Clamped block size

---

## Logic Functions

### Mathematical Functions

- `abs($a)` - Absolute value
- `sign($a)` - Sign function
- `mix($a, $b, $i)` - Linear interpolation
- `inv-mul($a, $b)` - Inverse multiplication

### Comparison Functions

- `gt($a, $b)` - Greater than
- `lt($a, $b)` - Less than
- `ge($a, $b)` - Greater than or equal
- `le($a, $b)` - Less than or equal
- `eq($a, $b)` - Equal
- `ne($a, $b)` - Not equal

### Logical Functions

- `land($a, $b)` - Logical AND
- `lor($a, $b)` - Logical OR

---

## CSS Layers

### Layer Structure

- `@layer ux-agate` - Core layout and positioning
- `@layer ux-grid-layout` - Grid layout system
- `@layer u2-normalize` - CSS normalization
- `@layer u2-existence` - State-based styling
- `@layer u2-canvas` - Canvas element styling

---

## Layout System

### Root & Body Layout

```scss
:root, :where(html) {
    position: fixed;
    inset: 0px;
    min-inline-size: 100dvi;
    min-block-size: 100dvb;
    inline-size: 100%;
    block-size: 100%;
    display: flex;
    flex-direction: column;
    place-content: start;
    place-items: start;
    place-self: start;
}
```

### Body Layout

```scss
:where(body) {
    position: relative;
    inset: 0px;
    display: inline flex;
    place-content: start;
    place-items: start;
    place-self: start;
    min-inline-size: 100dvi;
    min-block-size: 100dvb;
    inline-size: 100%;
    block-size: 100%;
}
```

---

## State System

### Hidden State

```scss
*[data-hidden]:not([data-hidden="false"], .u2-while-animation) {
    display: none !important;
    pointer-events: none !important;
    touch-action: none !important;
    content-visibility: hidden !important;
}
```

### Dragging State

```scss
[data-dragging] {
    will-change: transform;
    transform: translateZ(0px);
    backdrop-filter: none !important;
    user-select: none !important;
}
```

### Canvas State

```scss
:where(canvas):is([is="ui-canvas"]) {
    position: fixed !important;
    inset: 0px !important;
    display: flex;
    place-content: center;
    place-items: center;
    place-self: center;
    pointer-events: none !important;
}
```
