---
alwaysApply: false
---
# üëÄ Project Features üëÄ

## ü§î Trivia

The primary build system is Vite. Take into account the latest versions of browsers (Chrome 137 and above) and standards (WICG, WHATWG, ECMA, W3C, TC39, CSSWG), as much as possible...

---

## üì¶ Project and Modules repositories

- <https://github.com/fest-live/dom.ts>
- <https://github.com/fest-live/lur.e>
- <https://github.com/fest-live/object.ts>
- <https://github.com/fest-live/fl.ui>
- <https://github.com/u2re-space/unite-2.man>

## üìÇ Project Directory Mapping

By default, use key-name as import root.

| Library | Path |
|---|---|
| `fest/lure`   | `modules/lur.e`     |
| `fest/dom`    | `modules/dom.ts`    |
| `fest/object` | `modules/object.ts` |
| `fest/fl-ui`  | `modules/fl.ui`     |

---

## üéØ Accessibility Features

- ARIA role assignments for form elements
- ARIA value properties for sliders
- ARIA live regions for dynamic content
- Keyboard navigation support
- Screen reader compatibility
- Focus management
- Respects `prefers-reduced-motion` media query
- Proper ARIA support
- Keyboard navigation support
- Screen reader compatibility

### Mobile Support

- Touch event handling
- Mobile-friendly input interactions
- Responsive design considerations
- Touch gesture recognition
- Mobile-optimized scrolling

### Responsive Utilities

- Container query responsive design
- Orientation-aware layouts
- Touch-friendly interactions
- Mobile-optimized components

### Container Queries

- Uses modern container query units (`cqi`, `cqb`)
- Responsive grid gaps based on container size
- Adaptive layouts based on available space

### Orientation Support

- Automatic orientation detection
- Coordinate system transformation
- Size swapping for different orientations
- Touch-friendly interactions

### Mobile Optimization

- Touch action management
- Viewport height handling
- Keyboard inset support
- Mobile-optimized scrolling

---

## üöÄ Performance Features

- WeakRef usage for memory management
- ResizeObserver for efficient size tracking
- RequestAnimationFrame for smooth animations
- Event delegation and optimization
- Lazy loading for icons and resources
- GPU acceleration for transforms
- Efficient repaint management
- Optimized animation properties

### Transform Animations

- Hardware-accelerated transforms
- Smooth coordinate transitions
- Scale and rotation support
- Pixel-perfect positioning

### Canvas & Shape

- Canvas utilities for drawing operations
- Shape utilities for geometric operations

---

## üåê Browser Support

### Modern Features

- CSS Container Queries
- CSS @property declarations
- CSS Grid Layout
- CSS Logical Properties
- CSS Container Units

### Fallbacks

- Progressive enhancement approach
- Graceful degradation for older browsers
- Polyfill support where needed
- Feature detection for advanced CSS

### Supported Features

Currently, only Chromium-based browsers most suitable.

- <https://chromestatus.com/>
- <https://developer.chrome.com/>
- <https://caniuse.com/>

---

## üìä Performance Considerations

### Optimization Strategies

- Efficient CSS custom properties usage
- Minimal repaints and reflows
- Hardware acceleration for animations
- Optimized selector specificity
- Efficient layout calculations
- `content-visibility: auto` for media elements
- `content-visibility: hidden` for empty elements
- `will-change: transform` for interactive elements
- Reduced motion support for accessibility

### Memory Management

- WeakRef usage for DOM references
- Efficient event delegation
- Optimized observation patterns
- Minimal memory footprint

---

## üõ†Ô∏è Development Workflow

### SCSS Structure

- Modular SCSS architecture
- Clear separation of concerns
- Reusable mixins and functions
- Consistent naming conventions
- Comprehensive documentation

### Build Process

- SCSS compilation to CSS
- CSS optimization and minification
- Source map generation
- Development and production builds
- Hot reload support

---

## üé® Styling Overview

### CSS Architecture Overview

The DOM.ts CSS system is built on a modular SCSS architecture with the following structure:

- **Properties** - CSS custom properties and @property declarations
- **Layout** - Core layout and positioning systems
- **GridLayout** - Advanced grid-based layout system
- **Mixins** - Reusable SCSS mixins and utilities
- **States** - State-based styling (hidden, dragging, etc.)
- **Normalize** - CSS normalization and reset styles
- **Lib** - Core logic functions and profile utilities

### Normalization System

#### Base Normalization

- Zero margins and padding on root elements
- Border-box sizing for all elements
- Transparent backgrounds by default
- Disabled user selection by default
- Disabled touch actions by default
