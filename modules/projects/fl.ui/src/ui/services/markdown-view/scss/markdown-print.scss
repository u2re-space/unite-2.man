// === Variables ===
$font-stack: "Source Sans 3", "Open Sans", "Ubuntu Sans", "Noto Sans", "Segoe UI", "Helvetica", "Calibri", "Carlito", "Twemoji Country Flags", "Comic Sans", Helvetica, serif, -apple-system, BlinkMacSystemFont, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
$font-size-base: 0.7em;
$page-margin: 10mm 12mm 10mm 12mm;
$line-height-base: 1.5;
$heading-padding-inline: 0.5em;
$heading-padding-inline-small: 0.75em;
$blockquote-margin-inline: 1.75em;
$blockquote-padding-inline: 1em;
$table-padding: 0.3em 0.6em;
$img-max-width: min(min(40%, 50dvi), 50cqi);

// === Mixins ===
@mixin break($before: auto, $inside: auto, $after: auto) {
    break-before: $before;
    break-inside: $inside;
    break-after: $after;
}

@mixin heading($size, $padding: $heading-padding-inline) {
    font-weight: bold;
    font-size: $size;
    padding-inline: $padding;
    margin-block-end: calc($size * 0.25);
    margin-block-start: calc($size * 0.75);
    text-align: start;
    display: block;
    line-height: 1.4;
    @include break(auto, avoid-page, avoid-page);
}

@mixin table-cell {
    padding: $table-padding;
    white-space: normal;
}

@mixin font-smoothing($mode: always) {
    font-smooth: $mode !important;
    -webkit-font-smoothing: if($mode == always, subpixel-antialiased, antialiased) !important;
    -moz-osx-font-smoothing: if($mode == always, auto, grayscale) !important;
}

// === Functions ===
@function heading-size($level) {
    @return if($level == 1, 2em, if($level == 2, 1.6em, if($level == 3, 1.2em, 1em)));
}

// === Main page styles ===
@page {
    size: A4;
    margin: $page-margin;
    font-family: $font-stack;
    font-size: $font-size-base;

    hr:only-child { display: none !important; }
    p, span { display: none !important; }
    @bottom-center { content: counter(page); }
    @top-right { content: "UC"; }
}

// === Main layer for printing ===
@layer md-print {
    [data-print] {
        math {
            math-style: normal;
            math-shift: normal;
            math-depth: auto-add;
        }
        math[mode="inline"] {
            math-style: compact;
            math-shift: compact;
        }

        *, *::before, *::after {
            box-sizing: border-box;
            white-space: normal;
            @include break();
        }

        &, * {
            content-visibility: visible;
            max-inline-size: 100%;
            scrollbar-width: thin;
            scrollbar-color: transparent transparent;
        }

        & {
            line-height: $line-height-base;
            isolation: isolate;
            white-space: normal;
        }

        p {
            line-height: $line-height-base;
            margin-block: 0.5em;
            margin-block-start: 1em;
            white-space: pre-line;
            text-indent: 0.75em;
            text-overflow: ellipsis;
            overflow-wrap: break-word;
            font-family: 10pt;
            @include break( );
            strong:first-child { font-size: 1.05em; }
        }

        // Headings
        h1 { @include heading(heading-size(1)); place-self: center; text-align: center; }
        h2 { @include heading(heading-size(2)); }
        h3 { @include heading(heading-size(3), $heading-padding-inline-small); margin-block-end: 1rem; }
        h4, h5, h6 { @include heading(heading-size(4), $heading-padding-inline-small); }

        hr { margin-block: 0.25em; display: block; block-size: 1px; margin: 2em 1em; }
        hr:only-child { display: none !important; }

        // Lists
        ol, ul {
            text-indent: 0em;
            margin-block: 0.5em;
            margin-inline-start: 0.75em;
            gap: 0px;
            block-size: max-content;
            display: block;
        }
        ol ol, ul ul, ol ul, ul ol {
            margin-inline-start: 0em;
            margin-block: 0.5em;
            gap: 0px;
        }
        li {
            padding: 0;
            white-space: normal;
            text-align: start;
            margin-block: 0em;
            text-indent: 0em;
            p { display: inline; white-space: normal; }
            &::marker { display: inline; white-space: nowrap; }
        }

        // Blockquote
        blockquote {
            text-indent: 0px;
            margin-inline: $blockquote-margin-inline;
            padding-inline: $blockquote-padding-inline;
            @include break();
            p { text-indent: 0px; }
        }

        // Table
        table {
            inline-size: 100%;
            border-collapse: collapse;
            inline-size: max-content;
            thead, tfoot, tbody, th, td, tr { @include table-cell; }
            @media screen {
                border: solid 1px rgb(from light-dark(#101010, #fff) r g b / 0.1) !important;
                th, td, tr { border: none 0px transparent; }
            }
        }

        // Images and media
        img, picture, video, canvas, svg {
            display: inline-block;
            max-width: $img-max-width;
            width: max-content;
            color: transparent;
            font-size: 0;
            line-height: 0;
        }
        img:not([src]), img[src=""], img.error {
            display: none;
            visibility: collapse;
            content-visibility: hidden;
        }

        // Hide elements
        div.hide, span.hide {
            display: none;
            visibility: collapse;
            content: "\[...\]";
            break-inside: avoid-page;
        }

        // Inline elements
        strong {
            display: inline;
            white-space: normal;
            font-weight: bold;
            @include break(auto, avoid-page, auto);
        }
        strong:has(+:not(h1, h2, h3, h4, h5, h6, hr)) { break-after: avoid-page; }

        // Pre/code
        pre, code {
            white-space: pre-wrap;
            @include break();
        }

        // Root containers
        #root, #__next { isolation: isolate; }

        // Main container
        & {
            text-align: justify;
            overflow: auto;
        }
    }

    // Font smoothing
    @media screen {
        * { @include font-smoothing(always); }
    }
    @media print {
        * { @include font-smoothing(never); }
        body, html { background-color: white !important; }
        :host { background-color: transparent !important; }
        p, span, a, ul, li, ol, strong, h1, h2 { filter: grayscale(100%); }
        blockquote, blockquote p { filter: none; }
        @scope (:where(body, :host) :not([data-print])) to (:has(> [data-print])) {
            :scope> :where(div, img, canvas, :not(:defined)):not([data-print]):not([data-print-pass]) {
                display: none !important;
                visibility: collapse !important;
            }
        }
        body { margin: 0; padding: 0; overflow: auto; }
        *:not(:defined), style, script, link {
            display: none !important;
            visibility: collapse !important;
        }
        [data-print] {
            li, ul, ol { text-align: start; }
            hr { background-color: transparent; }
        }
        [data-print-pass] {
            display: contents !important;
            visibility: visible;
        }
    }
}

// === Markdown page container ===
@layer markdown-page {
    :host {
        &, * { box-sizing: border-box; }
        & {
            background-color: transparent;
            inline-size: 100%;
            min-block-size: 100%;
            block-size: 100%;
            max-block-size: min(100dvb, 100cqb);
            display: block;
            flex-direction: column;
            content-visibility: visible;
            overflow: auto;
            container-type: inline-size;
            contain: none;
            padding: 2rem;
            font-size: 1em;
        }
        .markdown-body[data-print] {
            background-color: transparent;
            container-type: normal;
            contain: none;
            display: block;
            inline-size: 100%;
            block-size: max-content;
            min-block-size: 100%;
            max-block-size: none;
            overflow: hidden;
            font-size: 1em;
        }
    }
}

// === Page breaks ===
@layer page-breaks {
    h1:first-child { break-before: auto; }; h2 { break-before: auto; &:has(+h3) { break-before: recto; }; };
    h1:not(:first-child) { break-before: recto; break-after: auto; };
    *:has(+h1) { break-after: auto; };
    h1 ~ h2:first-of-type { break-before: auto; };
    :where(table) + h2 { break-before: recto; };
    hr:has(+h1, +h2, +h3, +h4, +h5, +h6) { break-after: vecto; };

    //
    table, pre, code, p, ul, ol, li {
        break-inside: avoid-page;
    }

    //
    :where(hr, p, ol, li, table, blockquote, pre, code, strong) {
        & + :where(h1, h2, h3, h4, h5, h6) {
            break-before: recto;
        }
        &:has(+h1, +h2, +h3, +h4, +h5, +h6) {
            break-after: auto;
        }
        &:not(hr):has(+h2) { break-after: recto; }
        &:has(+p, +pre, +code) { break-after: avoid-page; }
        &:has(+p, +ol, +li, +table, +blockquote, +strong) {
            break-after: avoid-page;
        }
        & + :where(p, ol, li, table, blockquote, strong) {
            break-before: avoid-page;
        }
        & + hr + :where(h1, h2):has(+:where(p, ol, ul, blockquote)) {
            break-before: recto;
        }
    }

    //
    .pb, .np, .pagebreak, .newpage, .page-break, .new-page {
        background-color: transparent;
        page-break-after: always;
        break-after: page;
    }

    //
    :where(h1, h2, h3, h4, h5, h6) {
        &:has(+:where(hr, p, ul, ol, li, table, blockquote, pre, code)) {
            break-before: auto;
            break-after: vecto;
        }
    }

    //
    :where(h1, h2) {
        &:has(+:where(p, table, hr)) {
            break-before: recto;
        }
    }
}
