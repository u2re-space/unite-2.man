@use "sass:meta";
@use "sass:color";
@use "sass:string";
@use "sass:list";

// UI design tokens (defaults; can be overridden by downstream files)
$ui-radius-sm: 0.25rem !default;
$ui-radius-md: 0.5rem !default;
$ui-radius-lg: 0.75rem !default;
$ui-border-width: 1px !default;
$ui-duration-fast: 0.15s !default;
$ui-duration-standard: 0.25s !default;
$ui-ease-standard: ease !default;
$ui-spacing-2xs: 0.125rem !default;
$ui-spacing-xs: 0.25rem !default;
$ui-spacing-sm: 0.5rem !default;
$ui-spacing-md: 0.75rem !default;
$ui-titlebar-height: 32px !default;
$ui-font-title-size: 0.75rem !default;
$ui-font-subtitle-size: 0.5rem !default;

// Shadows
$ui-shadow-soft: 0 1px 3px rgb(0 0 0 / 0.12), 0 1px 2px rgb(0 0 0 / 0.08) !default;
$ui-shadow-elevated: 0 4px 12px rgb(0 0 0 / 0.15), 0 1px 3px rgb(0 0 0 / 0.1) !default;

// Transition helpers
@mixin transition($properties: all, $duration: $ui-duration-fast, $timing: $ui-ease-standard) {
    & {
        $prop-list: if(meta.type-of($properties) == 'list', list.join($properties, ", "), $properties);
        transition: #{$prop-list} #{$duration} #{$timing};
    }
}

// Spacing helpers
@mixin padding($value) { & { padding: #{$value}; } }
@mixin margin($value) { & { margin: #{$value}; } }
@mixin spacing($p: null, $m: null) {
    & {
        @if $p != null { padding: #{$p}; }
        @if $m != null { margin: #{$m}; }
    }
}

// Border/radius/shadow helpers
@mixin border($width: $ui-border-width, $style: solid, $color: currentColor) {
    & {
        border-width: #{$width};
        border-style: #{$style};
        border-color: #{$color};
    }
}

//
@mixin radius($r: $ui-radius-md) { & { border-radius: #{$r}; } }
@mixin shadow($value: $ui-shadow-soft) { & { box-shadow: #{$value}; } }

// Container helpers
@mixin container($name: auto, $type: size, $contain: strict) {
    & {
        container-type: #{$type};
        @if $name != auto { container-name: #{$name}; }
        contain: #{$contain};
    }
}

// Text helpers
@mixin text($size: inherit, $weight: 400, $color: inherit) {
    & {
        font-size: #{$size};
        font-weight: #{$weight};
        color: #{$color};
    }
}
@mixin text-ellipsis($nowrap: true) {
    & {
        text-overflow: ellipsis;
        overflow: hidden;
        @if $nowrap { white-space: nowrap; }
    }
}

// Alignment helpers
@mixin center($axis: 'both') {
    & {
        @if $axis == 'both' { place-content: center; place-items: center; }
        @else if $axis == 'x' { justify-content: center; align-items: stretch; }
        @else if $axis == 'y' { align-items: center; justify-content: stretch; }
    }
}

//
@mixin hover($selector: "&") {
    & {
        @media screen and ((hover: hover) or (pointer: fine))   { #{$selector}:hover { @content; } }
        @media screen and ((hover: none) and (pointer: coarse)) { #{$selector}:action { @content; } }
    }
}

//
// theme-dependent property setter
// prefers CSS light-dark when available, otherwise uses color-mix with var(--tm-scheme)
@mixin tm-dep($property, $light, $dark) {
    & {
        #{$property}: color-mix(in oklch, #{$light} calc(100% * var(--tm-scheme)), #{$dark});
        @supports(color: light-dark(white, black)) { #{$property}: light-dark(#{$light}, #{$dark}); }
    }
}

//
@mixin inverse {
    & {
        @include tm-dep("--tm-cr", var(--tm-cr-dark), var(--tm-cr-light));
        --tm-ac: #{tm-lo(var(--tm-origin, currentColor), 80%) };
    }
}

//
@mixin reset-vars($vars...) { @each $v in $vars { #{$v}: 0; } }

//
@mixin box($r, $ov: visible) {
    & {
        border-radius: $r;
        overflow: $ov;
    }
}

//
@mixin flex($dir, $justify: start, $align: center) {
    & {
        display: flex;
        flex-direction: $dir;
        justify-content: $justify;
        align-items: $align;
    }
}

//
@mixin grid($cols, $rows, $gap: 0) {
    & {
        display: grid;
        grid-template-columns: $cols;
        grid-template-rows: $rows;
        gap: $gap;
    }
}

//
// (removed duplicate tm-dep mixin) keep single canonical version above

//
$def-ff: 'InterVariable', 'Inter', 'Open Sans', 'Source Sans 3','Gill Sans Nova', Ubuntu, 'DejaVu Sans', Candara, Segoe, "Segoe UI", Optima, source-sans-pro, sans-serif;
@mixin typography($fs, $ff: $def-ff) {
    & {
        font-size: $fs;
        font-family: $ff;
    }
}

//
@function tm-hi($base, $percent) { @return color-mix(in oklch, #{$base} calc(100% - #{$percent}), var(--tm-hi, white)); };
@function tm-lo($base, $percent) { @return color-mix(in oklch, #{$base} calc(100% - #{$percent}), var(--tm-lo, black)); };

//
@mixin size($inline: 100%, $block: 100%, $aspect-ratio: auto) {
    & {
        inline-size: #{$inline};
        block-size: #{$block};
        aspect-ratio: #{$aspect-ratio};
    }
}

//
@mixin position($type: absolute, $inset: 0) {
    & {
        position: #{$type};
        inset: #{$inset};
    }
}

//
@mixin display($type: inline-block, $direction: row, $items: center, $content: center) {
    & {
        display: #{$type};
        flex-direction: #{$direction};
        place-items: #{$items};
        place-content: #{$content};
        box-sizing: border-box;
    }
}

//
@mixin interaction($pointerEvents: auto, $cursor: default, $userSelect: none) {
    & {
        pointer-events: #{$pointerEvents};
        user-select: #{$userSelect};
        cursor: #{$cursor};
    }
}

//
@mixin scrollbar($overflow: hidden, $width: thin, $color: transparent transparent, $gutter: auto) {
    & {
        scrollbar-width: #{$width};
        scrollbar-color: #{$color};
        scrollbar-gutter: #{$gutter};
        overflow: #{$overflow};
    }
}

//
@mixin color($bg: transparent, $color: transparent) {
    & {
        color: #{$color};
        background-color: #{$bg};
    }
}

//
@mixin place($method: stretch) {
    & {
        place-content: #{$method};
        place-items: center;
    }
}

//
@mixin grid-flow ($direction: row) {
    & {
        display: grid;
        grid-auto-flow: #{$direction};
    }
}

//
@mixin flex-flow ($direction: row) {
    & {
        display: flex;
        flex-direction: #{$direction};
    }
}

//
@mixin grid-column {
    @include grid-flow(row);
    @include place(center);

    & {
        --order: sibling-index();
        grid-column: var(--order, 1) / calc(var(--order, 1) + 1); grid-row: 1 / -1;
        grid-template-columns: minmax(0px, 1fr); grid-template-rows: subgrid;
    }
}

//
@mixin grid-row {
    @include grid-flow(column);
    @include place(center);

    & {
        --order: sibling-index();
        grid-column: 1 / -1; grid-row: var(--order, 1) / calc(var(--order, 1) + 1);
        grid-template-columns: subgrid; grid-template-rows: minmax(0px, max-content);
    }
}

//
@mixin flex-column {
    & {
        --order: sibling-index();
        order: var(--order, auto);
        flex: 1 1 max-content;
    }

    //
    @include place(center);
}

// used with padding
@function limit-by-size($pwidth, $basis: 100%, $min: 0px) {
    @return max(calc($basis - ($basis - $pwidth)), $min);
}

//
//@mixin radius($radius: 50%) { clip-path: inset(0px 0px round #{$radius}); }
@mixin round-corner($radius: 50%) {
    & { clip-path: inset(0px 0px round #{$radius}); }
}

// utility to apply the same content both inside :host(...) and outside host using slotted child
@mixin host-related($host, $child) {
    // outside web component
    #{$host} { & > #{$child} { @content; } }
    // inside web component
    :host(#{$host}) { ::slotted(#{$child}) { @content; } }
}

//
@mixin host-context($host, $relative: null) {
    @if $relative == null {
        #{$host} { @content; }
        :host(#{$host}) { @content; }
    } @else {
        #{$relative} { #{$host} { @content; } }
        :host(#{$host}):host-context(#{$relative}) { @content; }
    }
}

//
@mixin inline-stretch { & { inline-size: 100%; inline-size: -webkit-fill-available; inline-size: stretch; } }

//
@mixin block-stretch { & { block-size: 100%; block-size: -webkit-fill-available; block-size: stretch; } }

//
@mixin content-inline-size { & { padding-inline: limit-by-size(calc(var(--content-inline-size, 100%) * 0.5), 100%); } }

//
@mixin content-block-size { & { padding-block: limit-by-size(calc(var(--content-block-size, 100%) * 0.5), 100%); } }

//
@mixin ux-anchor { & { transform: scale(var(--scale, 1)) translate(var(--translate-x, 0px), var(--translate-y, 0px)); } }

//
@mixin grid-layered {
    & { grid-template-columns: minmax(0px, 1fr); grid-template-rows: minmax(0px, 1fr); }
    & > * { grid-column: 1 / -1; grid-row: 1 / -1; }
}

//
@mixin grid-rows-3c { & { grid-template-columns: minmax(0px, max-content) minmax(0px, 1fr) minmax(0px, max-content); } }
